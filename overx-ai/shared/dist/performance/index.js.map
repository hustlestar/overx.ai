{"version":3,"sources":["../../components/Performance/OptimizedImage.tsx","../../components/Performance/LazyLoad.tsx","../../components/Performance/PreloadLink.tsx"],"names":["React","useState","useRef","useEffect"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\n\ninterface OptimizedImageProps {\n  src: string\n  alt: string\n  width?: number | string\n  height?: number | string\n  priority?: boolean\n  eager?: boolean\n  className?: string\n  ImageComponent?: React.ComponentType<any>\n  [key: string]: any\n}\n\nexport const OptimizedImage: React.FC<OptimizedImageProps> = ({\n  src,\n  alt,\n  width,\n  height,\n  priority = false,\n  eager = false,\n  className = '',\n  ImageComponent,\n  ...rest\n}) => {\n  const loading = priority || eager ? 'eager' : 'lazy'\n  \n  if (ImageComponent) {\n    return (\n      <ImageComponent\n        src={src}\n        alt={alt}\n        width={width}\n        height={height}\n        loading={loading}\n        priority={priority}\n        className={className}\n        placeholder=\"blur\"\n        quality={85}\n        {...rest}\n      />\n    )\n  }\n\n  // Fallback to regular img tag\n  return (\n    <img\n      src={src}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={loading}\n      className={className}\n      {...rest}\n    />\n  )\n}","import React, { useEffect, useRef, useState } from 'react'\n\ninterface LazyLoadProps {\n  children: React.ReactNode\n  offset?: number\n  placeholder?: React.ReactNode\n  className?: string\n  once?: boolean\n}\n\nexport const LazyLoad: React.FC<LazyLoadProps> = ({\n  children,\n  offset = 100,\n  placeholder = null,\n  className = '',\n  once = true\n}) => {\n  const [isVisible, setIsVisible] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const hasBeenVisible = useRef(false)\n\n  useEffect(() => {\n    const container = containerRef.current\n    if (!container) return\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true)\n            hasBeenVisible.current = true\n            if (once) {\n              observer.unobserve(entry.target)\n            }\n          } else if (!once && hasBeenVisible.current) {\n            setIsVisible(false)\n          }\n        })\n      },\n      {\n        rootMargin: `${offset}px`\n      }\n    )\n\n    observer.observe(container)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [offset, once])\n\n  return (\n    <div ref={containerRef} className={className}>\n      {isVisible ? children : placeholder}\n    </div>\n  )\n}","import React from 'react'\n\ninterface PreloadResource {\n  href: string\n  as: 'script' | 'style' | 'image' | 'font' | 'fetch'\n  type?: string\n  crossOrigin?: 'anonymous' | 'use-credentials'\n}\n\ninterface PreloadLinkProps {\n  resources: PreloadResource[]\n  HeadComponent?: React.ComponentType<{ children: React.ReactNode }>\n}\n\nexport const PreloadLink: React.FC<PreloadLinkProps> = ({ resources, HeadComponent }) => {\n  const links = (\n    <>\n      {resources.map((resource, index) => (\n        <link\n          key={index}\n          rel=\"preload\"\n          href={resource.href}\n          as={resource.as}\n          type={resource.type}\n          crossOrigin={resource.crossOrigin}\n        />\n      ))}\n    </>\n  )\n\n  return HeadComponent ? <HeadComponent>{links}</HeadComponent> : links\n}\n\ninterface PrefetchLinkProps {\n  urls: string[]\n  HeadComponent?: React.ComponentType<{ children: React.ReactNode }>\n}\n\nexport const PrefetchLink: React.FC<PrefetchLinkProps> = ({ urls, HeadComponent }) => {\n  const links = (\n    <>\n      {urls.map((url, index) => (\n        <link key={index} rel=\"prefetch\" href={url} />\n      ))}\n    </>\n  )\n\n  return HeadComponent ? <HeadComponent>{links}</HeadComponent> : links\n}\n\ninterface PreconnectLinkProps {\n  origins: string[]\n  HeadComponent?: React.ComponentType<{ children: React.ReactNode }>\n}\n\nexport const PreconnectLink: React.FC<PreconnectLinkProps> = ({ origins, HeadComponent }) => {\n  const links = (\n    <>\n      {origins.map((origin, index) => (\n        <link key={index} rel=\"preconnect\" href={origin} />\n      ))}\n    </>\n  )\n\n  return HeadComponent ? <HeadComponent>{links}</HeadComponent> : links\n}"]}