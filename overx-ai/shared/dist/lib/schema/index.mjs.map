{"version":3,"sources":["../../../lib/schema/organization.ts","../../../lib/schema/article.ts","../../../lib/schema/product.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { StructuredData } from '../../components/SEO/types'\n\ninterface OrganizationConfig {\n  name: string\n  url: string\n  logo: string\n  sameAs?: string[]\n  contactPoint?: {\n    telephone: string\n    contactType: string\n    areaServed?: string | string[]\n    availableLanguage?: string | string[]\n  }\n  address?: {\n    streetAddress: string\n    addressLocality: string\n    addressRegion: string\n    postalCode: string\n    addressCountry: string\n  }\n}\n\nexport function createOrganizationSchema(config: OrganizationConfig): StructuredData {\n  const schema: StructuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    name: config.name,\n    url: config.url,\n    logo: config.logo\n  }\n\n  if (config.sameAs) {\n    schema.sameAs = config.sameAs\n  }\n\n  if (config.contactPoint) {\n    schema.contactPoint = {\n      '@type': 'ContactPoint',\n      ...config.contactPoint\n    }\n  }\n\n  if (config.address) {\n    schema.address = {\n      '@type': 'PostalAddress',\n      ...config.address\n    }\n  }\n\n  return schema\n}\n\nexport function createWebSiteSchema(config: {\n  name: string\n  url: string\n  potentialAction?: boolean\n}): StructuredData {\n  const schema: StructuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    name: config.name,\n    url: config.url\n  }\n\n  if (config.potentialAction) {\n    schema.potentialAction = {\n      '@type': 'SearchAction',\n      target: {\n        '@type': 'EntryPoint',\n        urlTemplate: `${config.url}/search?q={search_term_string}`\n      },\n      'query-input': 'required name=search_term_string'\n    }\n  }\n\n  return schema\n}","import { StructuredData } from '../../components/SEO/types'\n\ninterface Author {\n  name: string\n  url?: string\n  image?: string\n}\n\ninterface ArticleConfig {\n  headline: string\n  description: string\n  image: string | string[]\n  datePublished: string\n  dateModified?: string\n  author: Author | Author[]\n  publisher: {\n    name: string\n    logo: string\n  }\n  mainEntityOfPage?: string\n  keywords?: string[]\n  articleSection?: string\n  wordCount?: number\n}\n\nexport function createArticleSchema(config: ArticleConfig): StructuredData {\n  const authors = Array.isArray(config.author) ? config.author : [config.author]\n  \n  const schema: StructuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    headline: config.headline,\n    description: config.description,\n    image: config.image,\n    datePublished: config.datePublished,\n    dateModified: config.dateModified || config.datePublished,\n    author: authors.map(author => ({\n      '@type': 'Person',\n      name: author.name,\n      ...(author.url && { url: author.url }),\n      ...(author.image && { image: author.image })\n    })),\n    publisher: {\n      '@type': 'Organization',\n      name: config.publisher.name,\n      logo: {\n        '@type': 'ImageObject',\n        url: config.publisher.logo\n      }\n    }\n  }\n\n  if (config.mainEntityOfPage) {\n    schema.mainEntityOfPage = {\n      '@type': 'WebPage',\n      '@id': config.mainEntityOfPage\n    }\n  }\n\n  if (config.keywords) {\n    schema.keywords = config.keywords.join(', ')\n  }\n\n  if (config.articleSection) {\n    schema.articleSection = config.articleSection\n  }\n\n  if (config.wordCount) {\n    schema.wordCount = config.wordCount\n  }\n\n  return schema\n}\n\nexport function createBlogPostingSchema(config: ArticleConfig & {\n  blogUrl?: string\n}): StructuredData {\n  const schema = createArticleSchema(config)\n  schema['@type'] = 'BlogPosting'\n  \n  if (config.blogUrl) {\n    schema.isPartOf = {\n      '@type': 'Blog',\n      '@id': config.blogUrl\n    }\n  }\n\n  return schema\n}","import { StructuredData } from '../../components/SEO/types'\n\ninterface Offer {\n  price: string\n  priceCurrency: string\n  availability: 'https://schema.org/InStock' | 'https://schema.org/OutOfStock' | 'https://schema.org/PreOrder'\n  priceValidUntil?: string\n  url?: string\n}\n\ninterface Review {\n  author: string\n  reviewRating: {\n    ratingValue: number\n    bestRating?: number\n  }\n  reviewBody?: string\n  datePublished?: string\n}\n\ninterface ProductConfig {\n  name: string\n  description: string\n  image: string | string[]\n  brand: string\n  sku?: string\n  mpn?: string\n  offers?: Offer | Offer[]\n  aggregateRating?: {\n    ratingValue: number\n    reviewCount: number\n    bestRating?: number\n  }\n  review?: Review[]\n}\n\nexport function createProductSchema(config: ProductConfig): StructuredData {\n  const schema: StructuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: config.name,\n    description: config.description,\n    image: config.image,\n    brand: {\n      '@type': 'Brand',\n      name: config.brand\n    }\n  }\n\n  if (config.sku) {\n    schema.sku = config.sku\n  }\n\n  if (config.mpn) {\n    schema.mpn = config.mpn\n  }\n\n  if (config.offers) {\n    const offers = Array.isArray(config.offers) ? config.offers : [config.offers]\n    schema.offers = offers.map(offer => ({\n      '@type': 'Offer',\n      ...offer\n    }))\n  }\n\n  if (config.aggregateRating) {\n    schema.aggregateRating = {\n      '@type': 'AggregateRating',\n      ...config.aggregateRating\n    }\n  }\n\n  if (config.review) {\n    schema.review = config.review.map(review => ({\n      '@type': 'Review',\n      author: {\n        '@type': 'Person',\n        name: review.author\n      },\n      reviewRating: {\n        '@type': 'Rating',\n        ...review.reviewRating\n      },\n      ...(review.reviewBody && { reviewBody: review.reviewBody }),\n      ...(review.datePublished && { datePublished: review.datePublished })\n    }))\n  }\n\n  return schema\n}\n\ninterface SoftwareApplicationConfig extends Omit<ProductConfig, 'sku' | 'mpn'> {\n  applicationCategory: string\n  operatingSystem?: string\n  applicationSubCategory?: string\n  permissions?: string[]\n  screenshot?: string | string[]\n}\n\nexport function createSoftwareApplicationSchema(config: SoftwareApplicationConfig): StructuredData {\n  const schema: StructuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'SoftwareApplication',\n    name: config.name,\n    description: config.description,\n    image: config.image,\n    applicationCategory: config.applicationCategory,\n    offers: config.offers,\n    aggregateRating: config.aggregateRating,\n    review: config.review\n  }\n\n  if (config.operatingSystem) {\n    schema.operatingSystem = config.operatingSystem\n  }\n\n  if (config.applicationSubCategory) {\n    schema.applicationSubCategory = config.applicationSubCategory\n  }\n\n  if (config.permissions) {\n    schema.permissions = config.permissions.join(', ')\n  }\n\n  if (config.screenshot) {\n    schema.screenshot = config.screenshot\n  }\n\n  return schema\n}"]}